#:import random random
#:import Clock kivy.clock.Clock
##  #:import PythonLexer pygments.lexers.PythonLexer

<AbilityScoreLabel>
    source: None
    font_size: '24sp'
    text_size: self.size
    size: self.size
    height: '40sp'
    margin: 5, 5
    size_hint: 1, None
    halign: 'right'
    valign: 'middle'
    padding: -5, 0


<AbilityScore>
    halign: 'center'
    markup: True
    bold: True
    padding: 0, 0
    background_color: .1, .1, .1, 0
    on_press: Clock.schedule_once(self.on_long_press, 2)
    on_release: Clock.unschedule(self.on_long_press)
    canvas.before:
        Color:
            rgba: .1, .1, .1, 0.7
        Rectangle:
            pos: self.pos
            size: self.size


<SubGridLayout>:
    size_hint: 1, None
    cols: 1
    spacing: [0,5]
    ch_calc: self.children[-1].height if len(self.children) > 0 else 0
    h_calc: (self.ch_calc+self.spacing[1])
    row_calc: (len(self.children)/self.cols) if len(self.children) > 0 else 0
    height: self.h_calc*self.row_calc


<StatsTab>:
    text:   "Statistics"
    GridLayout:
        cols: 1
        padding: 5
        spacing: 10
        AbilityScore:
            text: root.uic.name
            halign: 'center'
        ###############
        # Attributes
        ###############
        SubGridLayout:
            cols: 4
            AbilityScoreLabel:
                text: "Str:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.str_score, int(root.uic.str))
                _audit_prop: 'str_score'
            AbilityScoreLabel:
                text: "Int:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.int_score, int(root.uic.int))
                _audit_prop: 'int_score'
            AbilityScoreLabel:
                text: "Dex:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.dex_score, int(root.uic.dex))
                _audit_prop: 'dex_score'
            AbilityScoreLabel:
                text: "Wis:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.wis_score, int(root.uic.wis))
                _audit_prop: 'wis_score'
            AbilityScoreLabel:
                text: "Con:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.con_score, int(root.uic.con))
                _audit_prop: 'con_score'
            AbilityScoreLabel:
                text: "Cha:"
            AbilityScore:
                text: "%s (%+d)" % (root.uic.cha_score, int(root.uic.cha))
                _audit_prop: 'cha_score'
        ###############
        # Saves
        ###############
        SubGridLayout:
            cols: 6
            AbilityScoreLabel:
                text: "Fort:"
            AbilityScore:
                text: "%+d" % int(root.uic.fort)
                _audit_prop: 'fort'
            AbilityScoreLabel:
                text: "Ref:"
            AbilityScore:
                text: "%+d" % int(root.uic.ref)
                _audit_prop: 'ref'
            AbilityScoreLabel:
                text: "Will:"
            AbilityScore:
                text: "%+d" % int(root.uic.will)
                _audit_prop: 'will'
        ###############
        # AC
        ###############
        SubGridLayout:
            cols: 4
            AbilityScoreLabel:
                text: "HP:"
            AbilityScore:
                text: root.uic.HP
                _audit_prop: 'HP'
            AbilityScoreLabel:
                text: "AC:"
            AbilityScore:
                text: root.uic.AC
                _audit_prop: 'AC'
            AbilityScoreLabel:
                text: "Tch AC:"
            AbilityScore:
                text: root.uic.touch_AC
                _audit_prop: 'touch_AC'
            AbilityScoreLabel:
                text: "Flat AC:"
            AbilityScore:
                text: root.uic.flatfooted_AC
                _audit_prop: 'flatfooted_AC'
        ###############
        # Weapons
        ###############
        SubGridLayout:
            cols: 1
            spacing: [0,0]
            AbilityScoreLabel:
                text: "Main Hand"
                halign: 'center'
            Spinner:
                values: root.uic.weapons + ['None']
                text: root.uic.main_hand
                on_text: root.update_weapon('mh', self.text)
            AbilityScoreLabel:
                text: "Off Hand"
                halign: 'center'
            Spinner:
                values: root.uic.weapons + ['None']
                text: root.uic.off_hand
                on_text: root.update_weapon('oh', self.text)

        #Button:
        #    text: 'Str Boost'
        #    on_press: root.test_button_press()


<AttacksTab>:
    text:   "Attacks/Buffs"
    BoxLayout:
        orientation: 'vertical'
        spacing: 5
        Label:
            text: "Buffs:"
            size_hint: 1, None
            height: 20
            padding: [0, 5]
        ScrollView:
            size_hint: 1, .66
            #size: 500, 1320
            pos_hint: {'center_x': .5, 'center_y': .5}
            do_scroll_x: False
            GridLayout:
                cols: 1
                size_hint: 1, None
                spacing: 10
                padding: [10, 0, 10, 10]    # Top is 0
                id: buffs
                Label:
                    text: "Buffs"
        Label:
            text: "Attacks:"
            size_hint: 1, None
            height: 20
        ScrollView:
            size_hint: 1, .33
            #size: 500, 1320
            pos_hint: {'center_x': .5, 'center_y': .5}
            do_scroll_x: False
            GridLayout:
                cols: 1
                size_hint: 1, None
                spacing: 5
                padding: 10
                id: attacks
                Label:
                    text: "Attacks"

<AttackRow>:
    orientation: 'horizontal'
    padding: 5
    size_hint: 1, None
    height: '50sp'
    Button:
        id: name
        background_color: .1, .1, .1, .1
        on_press: Clock.schedule_once(root.on_long_press, 2)
        on_release: Clock.unschedule(root.on_long_press)
        size_hint: .5, 1
        halign: 'left'
    Label:
        id: atk
        size_hint: .07, 1
    Label:
        id: dmg
        size_hint: .15, 1
    Button:
        text: "Roll"
        size_hint: .15, 1
        on_press: root.show_roll()



<NewBuffPopup>:
    title: 'Create New Buff'
    size_hint: (.95, .5)
    stretch: False
    BoxLayout:
        id: content
        orientation: 'vertical'
        BoxLayout:
            orientaiton: 'horizontal'
			Label:
				size_hint: 1, .3
				text: "Name: "
			TextInput:
				id: buff_name
        NewBuffRow:
        Button:
            text: '+'
            size_hint: 1, None
            height: '50sp'
            on_release: root.add_row()
        BoxLayout:
            orientaiton: 'horizontal'
            Button:
                text: 'Ok'
                on_release: root.make_buff()
            Button:
                text: 'Cancel'
                on_release: root.dismiss()




<NewBuffRow>:
    orientation: 'horizontal'
    Spinner:
        id: attr_key
        size_hint: .3, None
        height: '50sp'
    Label:
        text: ' = '
        size_hint: .1, None
    TextInput:
		id: attr_value
        input_type: 'number'
        size_hint: .6, None

<CountersTab>:
    text: "Counters"
    Label:
        text: "Counters will be displayed here"

<SkillsTab>:
    text: "Skills"
    Label:
        text: "Skills will be displayed here"

<FeatsTab>:
    text: "Feats"
    Label:
        text: "Feats will be displayed here"

<SpellsTab>:
    text: "Spells"
    Label:
        text: "Spells will be displayed here"

<CodeTab>:
    text: "IBC Def"
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, .1
            Label:
                size_hint: 1, .5
                text: "Character ID"
            TextInput:
                id: IBC_id
                text: '-2'
                input_type: 'number'
            Button:
                text: 'Load'
                on_press: root.open_IBC()
        #CodeInput:
        #    id: code
        #    #lexer: PythonLexer()
        #    text: 'This is a test'
        ScrollView:
            id: scrlv
            TextInput:
                id: code
                text: ''
                size_hint: 1, None
                height: max( (len(self._lines)+1) * self.line_height, scrlv.height)
                font_name: 'fonts/DroidSansMono.ttf'
                font_size: '8sp'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, .1
            Button:
                text: 'Save and Apply'
                on_press: root.save_and_apply()
            Button:
                text: 'New and Apply'
                on_press: root.new_and_apply()